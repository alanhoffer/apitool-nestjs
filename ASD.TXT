  // voy  anesesitar el id del apiario y del usuario para luego ejecutar el serviceupdate para cambiar la imagenque se agrego a la db
  // tambiien voy a nesesitar la entity de la imagen ya que las imagens estaran guardadas en otro lado
  @Post(':id/profile/image')
  @UseInterceptors(
    FileInterceptor('image', {
      storage: diskStorage({
        destination: './uploads/apiarys/images',

        filename: (req, file, cb) => {
          const filename: string = uuidv4();
          const extension: string = file.originalname.split('.').pop();
          console.log(file);
          cb(null, `${filename}.${extension}`);
        },
      }),
    }),
  )
  uploadFile(
    @Param('id') id: number,
    @UploadedFile(
      new ParseFilePipe({
        validators: [
          new MaxFileSizeValidator({ maxSize: 1000000 }),
          new FileTypeValidator({ fileType: '.(image|png|jpeg|jpg)' }),
        ],
      }),
    )
    file: Express.Multer.File,
  ) {
    const updatedApiary = this.apiarysService.updateApiary(id, {
      image: file.filename,
    });
    return updatedApiary;
  }

  @Get('profile/image/:id')
  getFile(
    @Res({ passthrough: true }) res: Response,
    @Param('id') id: string,
  ): StreamableFile {
    res.setHeader('Content-Type', 'image/jpeg');
    const imagesPath = '/uploads/apiarys/images/';
    const file = createReadStream(join(process.cwd(), imagesPath + id));

    return new StreamableFile(file);
  }

  @UseGuards(AuthGuard)
  @Get()
  async getApiarys(@Request() req) {
    const apiaryArrayFound = this.apiarysService.getAllByUserId(req.user.sub);

    if (!apiaryArrayFound) {
      return new HttpException('User not found', HttpStatus.NOT_FOUND);
    }
    return apiaryArrayFound;
  }